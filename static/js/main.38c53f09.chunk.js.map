{"version":3,"sources":["../../src/components/Form/Fields/helpers.js","../../src/components/Form/Fields/Input/Input.js","../../src/components/Form/Fields/Textarea/Textarea.js","../../src/components/Form/Fields/Select/Select.js","../../src/components/Form/FormContainer.js","components/Demo/index.js","App.js","index.js"],"names":["renderError","showErrorWhenNotFocused","error","formik","name","data-test","TextField","type","rest","htmlFor","Textarea","Select","options","onChange","value","label","key","index","FormContainer","render","useFormik","validationSchema","props","fieldProps","e","id","handleChange","renderSubmitBtn","isSubmitting","spinner","string","oneOfType","instanceOf","func","bool","shape","isRequired","initialValues","object","onSubmit","age","height","custom","values","console","log","setTimeout","setSubmitting","resetForm","Yup","required","typeError","Demo","formContainerProps","heightOptions","useState","displayAge","setDisplayAge","renderInput","renderSelect","renderBtn","handleSubmit","placeholder","target","errors","onClick","handleReset","style","color","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.38c53f09.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const renderError = (showErrorWhenNotFocused, error, formik, name) => {\r\n  if (!showErrorWhenNotFocused) {\r\n    return error && formik.touched[name] && <div data-test='error'>{error}</div>\r\n  }\r\n  return error && <div>{error}</div>\r\n}\r\n\r\n","import React from 'react'\r\nimport {\r\n  string,\r\n  func,\r\n  oneOfType,\r\n  number,\r\n  instanceOf,\r\n  object,\r\n  bool\r\n} from 'prop-types'\r\nimport { renderError } from '../helpers'\r\n\r\nfunction TextField({\r\n  name,\r\n  label,\r\n  value,\r\n  onChange,\r\n  error,\r\n  showErrorWhenNotFocused,\r\n  formik = {},\r\n  type = 'text',\r\n  ...rest\r\n}) {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        name={name}\r\n        label={label}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        type={type}\r\n        onBlur={!showErrorWhenNotFocused ? formik.handleBlur : () => {}}\r\n        {...rest}\r\n      />\r\n      {renderError(showErrorWhenNotFocused, error, formik, name)}\r\n    </div>\r\n  )\r\n}\r\n\r\nTextField.propTypes = {\r\n  name: string.isRequired,\r\n  label: string.isRequired,\r\n  type: string,\r\n  error: string,\r\n  value: oneOfType([string, number, instanceOf(Date)]).isRequired,\r\n  onChange: func.isRequired,\r\n  formik: object,\r\n  showErrorWhenNotFocused: bool\r\n}\r\n\r\nexport default TextField\r\n","import React from 'react'\r\nimport {\r\n  string,\r\n  func,\r\n  oneOfType,\r\n  number,\r\n  instanceOf,\r\n  object,\r\n  bool\r\n} from 'prop-types'\r\nimport { renderError } from '../helpers'\r\n\r\nfunction Textarea({\r\n  name,\r\n  label,\r\n  value,\r\n  onChange,\r\n  error,\r\n  showErrorWhenNotFocused,\r\n  formik = {},\r\n  type = 'text',\r\n  ...rest\r\n}) {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <textarea\r\n        name={name}\r\n        label={label}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        type={type}\r\n        onBlur={!showErrorWhenNotFocused ? formik.handleBlur : () => {}}\r\n        {...rest}\r\n      />\r\n      {renderError(showErrorWhenNotFocused, error, formik, name)}\r\n    </div>\r\n  )\r\n}\r\n\r\nTextarea.propTypes = {\r\n  name: string.isRequired,\r\n  label: string.isRequired,\r\n  type: string,\r\n  error: string,\r\n  value: oneOfType([string, number, instanceOf(Date)]).isRequired,\r\n  onChange: func.isRequired,\r\n  formik: object,\r\n  showErrorWhenNotFocused: bool\r\n}\r\n\r\nexport default Textarea\r\n","import React from 'react'\r\nimport { renderError } from '../helpers'\r\nimport {\r\n  string,\r\n  func,\r\n  oneOfType,\r\n  number,\r\n  object,\r\n  bool,\r\n  arrayOf,\r\n  shape\r\n} from 'prop-types'\r\nfunction Select({\r\n  name,\r\n  label,\r\n  value,\r\n  onChange,\r\n  error,\r\n  showErrorWhenNotFocused,\r\n  formik = {},\r\n  options = [],\r\n  ...rest\r\n}) {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <select\r\n        data-test='control'\r\n        id={name}\r\n        value={value}\r\n        name={name}\r\n        onChange={onChange}\r\n        {...rest}\r\n      >\r\n        <option data-test='option' value=''></option>\r\n\r\n        {options.map(({ id, label }, index) => (\r\n          <option value={id} key={index}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {renderError(showErrorWhenNotFocused, error, formik, name)}\r\n    </div>\r\n  )\r\n}\r\n\r\nSelect.propTypes = {\r\n  name: string.isRequired,\r\n  label: string.isRequired,\r\n  value: oneOfType([string, number]).isRequired,\r\n  options: arrayOf(\r\n    shape({\r\n      id: oneOfType([string, number]).isRequired,\r\n      label: oneOfType([string, number]).isRequired\r\n    })\r\n  ).isRequired,\r\n  onChange: func.isRequired,\r\n  formik: object,\r\n  showErrorWhenNotFocused: bool,\r\n  error: string\r\n}\r\n\r\nexport default Select\r\n","import React, { Fragment } from 'react'\r\nimport { useFormik } from 'formik'\r\nimport { object, func } from 'prop-types'\r\nimport { Input, Select, Textarea } from './Fields'\r\n\r\nfunction FormContainer({ initialValues, onSubmit, validationSchema, render }) {\r\n  const formik = useFormik({\r\n    initialValues,\r\n    onSubmit,\r\n    validationSchema\r\n  })\r\n\r\n  /**\r\n   * renderInput - renders an input element\r\n   * @function\r\n   * @param {{ name: string, label: string }} props - the props for the input. add any addition <input> attrs if necessary. eg: `placeholder`\r\n   */\r\n  const renderInput = (props = {}) => {\r\n    const {\r\n      name,\r\n      label,\r\n      onChange,\r\n      showErrorWhenNotFocused = false,\r\n      ...rest\r\n    } = props\r\n\r\n    const fieldProps = {\r\n      showErrorWhenNotFocused,\r\n      formik,\r\n      name,\r\n      label,\r\n\r\n      error: formik.errors[name],\r\n      value: formik.values[name],\r\n\r\n      onChange: (e) => {\r\n        formik.handleChange(e)\r\n        if (onChange) onChange(e)\r\n      },\r\n\r\n      ...rest\r\n    }\r\n\r\n    return <Input {...fieldProps} />\r\n  }\r\n\r\n  /**\r\n   * renderTextarea - renders an textarea element\r\n   * @function\r\n   * @param {{ name: string, label: string }} props - the props for the textarea. add any addition <input> attrs if necessary. eg: `placeholder`\r\n   */\r\n  const renderTextarea = (props = {}) => {\r\n    const {\r\n      name,\r\n      label,\r\n      onChange,\r\n      showErrorWhenNotFocused = false,\r\n      ...rest\r\n    } = props\r\n\r\n    const fieldProps = {\r\n      showErrorWhenNotFocused,\r\n      formik,\r\n      name,\r\n      label,\r\n\r\n      error: formik.errors[name],\r\n      value: formik.values[name],\r\n\r\n      onChange: (e) => {\r\n        formik.handleChange(e)\r\n        if (onChange) onChange(e)\r\n      },\r\n\r\n      ...rest\r\n    }\r\n\r\n    return <Textarea {...fieldProps} />\r\n  }\r\n\r\n  /**\r\n   * renderSelect - renders an select element\r\n   * @function\r\n   * @param {{ name: string, label: string, options: [{ id: string|number, label: string }] }} props - the props for the select. add any addition <select> attrs if necessary. eg: `placeholder`\r\n   */\r\n  const renderSelect = (props = {}) => {\r\n    const {\r\n      name,\r\n      label,\r\n      options,\r\n      onChange,\r\n      showErrorWhenNotFocused = false,\r\n      ...rest\r\n    } = props\r\n\r\n    const fieldProps = {\r\n      showErrorWhenNotFocused,\r\n      formik,\r\n      options,\r\n      label,\r\n      name,\r\n\r\n      value: formik.values[name],\r\n      error: formik.errors[name],\r\n\r\n      onChange: (e) => {\r\n        formik.handleChange(e)\r\n        if (onChange) onChange(e)\r\n      },\r\n\r\n      ...rest\r\n    }\r\n\r\n    return <Select {...fieldProps} />\r\n  }\r\n\r\n  /**\r\n   * renderBtn - renders an `ordinary` button element\r\n   * @function\r\n   * @param {{ label: string }} props - the props for the button. add any addition <button> attrs if necessary. eg: `onClick`\r\n   */\r\n  const renderBtn = (props = {}) => {\r\n    const { label, type = 'button', ...rest } = props\r\n\r\n    return (\r\n      <button type={type} {...rest}>\r\n        {label}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  /**\r\n   * renderSubmitBtn - renders a `submit` button element\r\n   * @function\r\n   * @param {{ label: string, spinner: boolean }} props - the props for the button. add any addition <button> attrs if necessary. eg: `style`\r\n   */\r\n  const renderSubmitBtn = (props = {}) => {\r\n    const { label, spinner, ...rest } = props\r\n\r\n    return (\r\n      <Fragment>\r\n        <button\r\n          disabled={!formik.isValid || formik.isSubmitting}\r\n          {...rest}\r\n          type='submit'\r\n        >\r\n          {label}\r\n        </button>\r\n        {spinner && formik.isSubmitting && spinner}\r\n      </Fragment>\r\n    )\r\n  }\r\n\r\n  const fieldProps = (name) => ({\r\n    name,\r\n    id: name,\r\n    value: formik.values[name],\r\n    onChange: formik.handleChange\r\n  })\r\n\r\n  const data = {\r\n    formik,\r\n    renderInput,\r\n    renderTextarea,\r\n    renderSelect,\r\n    renderBtn,\r\n    fieldProps,\r\n    renderSubmitBtn\r\n  }\r\n\r\n  return render(data)\r\n}\r\n\r\nFormContainer.propTypes = {\r\n  initialValues: object.isRequired,\r\n  render: func.isRequired,\r\n  onSubmit: func,\r\n  /**\r\n   * the `object` expected is from `yup.object()`\r\n   *\r\n   * @example\r\n   * import * as Yup from \"yup\";\r\n   * const validationSchema = Yup.object({\r\n   *  age: Yup.number().typeError('must be a number'),\r\n   *  name: Yup.string().required('required'),\r\n   * })\r\n   */\r\n  validationSchema: object\r\n}\r\n\r\nexport default FormContainer\r\n","import React, { useState } from 'react'\r\nimport * as Yup from 'yup'\r\nimport { FormContainer } from '@richcode/react-rapid-form'\r\n\r\nconst initialValues = {\r\n  name: '',\r\n  age: '',\r\n  height: '',\r\n  custom: ''\r\n}\r\n\r\nconst onSubmit = (values, props) => {\r\n  console.log(values)\r\n  console.log('is submitting...')\r\n\r\n  setTimeout(() => {\r\n    props.setSubmitting(false)\r\n    props.resetForm()\r\n    console.log('submitted.')\r\n  }, 3000)\r\n}\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required('required'),\r\n  age: Yup.string().required('required'),\r\n  height: Yup.string().required('required'),\r\n  custom: Yup.number().typeError('must be a number').required('required')\r\n})\r\n\r\nfunction Demo() {\r\n  const formContainerProps = {\r\n    initialValues,\r\n    onSubmit,\r\n    validationSchema\r\n  }\r\n\r\n  const heightOptions = [\r\n    { id: 2, label: 'two' },\r\n    { id: 3.5, label: 'three and half' },\r\n    { id: 6, label: '6ix' }\r\n  ]\r\n\r\n  const [displayAge, setDisplayAge] = useState(true)\r\n\r\n  return (\r\n    <div>\r\n      <FormContainer\r\n        {...formContainerProps}\r\n        render={({\r\n          formik,\r\n          renderInput,\r\n          renderSelect,\r\n          renderSubmitBtn,\r\n          renderBtn,\r\n          fieldProps\r\n        }) => (\r\n          <form onSubmit={formik.handleSubmit}>\r\n            {renderInput({ name: 'name', label: 'Name' })}\r\n\r\n            {renderSelect({\r\n              name: 'height',\r\n              label: 'Height',\r\n              options: heightOptions\r\n            })}\r\n\r\n            {displayAge &&\r\n              renderInput({\r\n                name: 'age',\r\n                label: 'age',\r\n                showErrorWhenNotFocused: true,\r\n                placeholder: 'the age of this guy',\r\n                onChange: ({ target }) => {\r\n                  if (target.value === 'hide') setDisplayAge(false)\r\n                }\r\n              })}\r\n\r\n            <div>\r\n              <label htmlFor='custom'>the custom input</label>\r\n\r\n              <input {...fieldProps('custom')} />\r\n\r\n              {formik.errors.custom && <div>{formik.errors.custom}</div>}\r\n            </div>\r\n\r\n            {renderBtn({\r\n              label: 'custom btn',\r\n              onClick: () => {\r\n                console.log('the custom btn clicked')\r\n              }\r\n            })}\r\n\r\n            <button\r\n              type='button'\r\n              onClick={() => {\r\n                if (formik.values.name) {\r\n                  formik.handleReset()\r\n                }\r\n              }}\r\n            >\r\n              reset form is name is valid\r\n            </button>\r\n\r\n            {renderSubmitBtn({\r\n              label: 'submit',\r\n              spinner: true,\r\n              style: { color: 'red' },\r\n              onClick: () => {\r\n                console.log('the submit btn clicked')\r\n              }\r\n            })}\r\n          </form>\r\n        )}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Demo\r\n\n","import React from 'react'\nimport '@richcode/react-rapid-form/dist/index.css'\nimport Demo from './components/Demo'\n\nconst App = () => {\n  return <Demo />\n}\n\nexport default App\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n"],"sourceRoot":""}